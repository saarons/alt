%% name = Alt::Parser
%% ast-location = ::Alt::AST
%% assign = ast Assignment(name, expression)
%% method_call = ast MethodCall(receiver, method, arguments)
%% number_literal = ast NumberLiteral(number)
%% true_literal = ast TrueLiteral
%% false_literal = ast FalseLiteral
%% nil_literal = ast NilLiteral

space = " "
char = /[A-Za-z]/
digit = /[0-9]/

newline = "\n"
terminator = newline (space | newline)*

number = < digit+ > { text }
identifier = < char+ > { text }

root = expressions

expressions = expressions:es terminator expression:e { es << e }
            | expressions:es terminator { es }
            | expression:e { [e] }
            | terminator
            
expression = assign
           | call
           | literal
           | "(" expression:e ")" { e }
           
literal = number:n ~number_literal(n)
        | "true" ~true_literal
        | "false" ~false_literal
        | "nil" ~nil_literal
        
call = literal:l "." identifier:i ~method_call(l, i, [])
     | literal:l "." identifier:i "(" arg_list:al ")" ~method_call(l, i, Array(al))
     | identifier:i ~method_call(nil, i, [])
     | identifier:i "(" arg_list:al ")" ~method_call(nil, i, Array(al))
     | expression:e "." identifier:i ~method_call(e, i, [])
     | expression:e "." identifier:i "(" arg_list:al ")" ~method_call(e, i, Array(al))
     
arg_list = expression     
         | arg_list:al "," expression:e { Array(al) << e }

assign = identifier:i space* "=" space* expression:e ~assign(i,e)