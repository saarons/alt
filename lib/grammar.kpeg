%% name = Alt::Parser
%% ast-location = ::Alt::AST
%% method_call = ast MethodCall(receiver, method, arguments)
%% string_literal = ast StringLiteral(string)
%% number_literal = ast NumberLiteral(number)
%% array_literal = ast ArrayLiteral(array)
%% object_literal = ast ObjectLiteral(object)
%% function_literal = ast FunctionLiteral(arguments, expressions, pure)
%% true_literal = ast TrueLiteral
%% false_literal = ast FalseLiteral
%% nil_literal = ast NilLiteral

%% {
ESCAPE_SEQUENCES = Hash[[["\\n", "\n"], ["\\b", "\b"], ["\\f", "\f"], ["\\r", "\r"], ["\\t", "\t"], ["\\\\\"", "\""], ["\\\\", "\\"]]]

def shunting_yard(input)
  [].tap do |rpn|
    operator_stack = []
    input.each do |object|
      if op1 = Alt::PrecedenceTable.lookup(object)
        rpn << operator_stack.pop while (op2 = operator_stack.last) && (op1.left_associative? ? op1.precedence <= op2.precedence : op1.precedence < op2.precedence)
        operator_stack << op1
      else
        rpn << object
      end
    end
    rpn << operator_stack.pop until operator_stack.empty?
  end
end

def rpn(input)
  results = []
  input.each do |object|
    if object.is_a?(Alt::AST::Operator)
      r, l = results.pop, results.pop
      results << object.apply(l, r)
    else
      results << object
    end
  end
  results.first
end

def escape(text)
  ESCAPE_SEQUENCES.reduce(text) { |text, (k, v)| text.gsub(k, v) }
end
}

space = " "
char = /[A-Za-z]/
digit = /[0-9]/

newline = "\n"
terminator = newline (space | newline)*

number = < digit+ ("." digit+)? > { text }
identifier = < char+ > { text }

string = '"' < (/[^\"]/)* > '"' { escape(text) }

- = space*
sp-nl = (space | newline)*

operators = "="
          | "||"
          | "&&"
          | "=="
          | "!="
          | "<"
          | "<="
          | ">"
          | ">="
          | "+"
          | "-"
          | "*"
          | "/"
          | "^"

root = expressions

expressions = expressions:es terminator expression:e { es << e }
            | expressions:es terminator { es }
            | expression:e { [e] }
            | terminator
            
expression = call
           | value
           
value = literal
      | "(" - expression:e - ")" { e }
      | identifier
           
literal = string:s ~string_literal(s)
        | number:n ~number_literal(n)
        | array:a ~array_literal(a)
        | object:o ~object_literal(o)
        | function
        | "true" ~true_literal
        | "false" ~false_literal
        | "nil" ~nil_literal
     
list = list:l - "," - value:v { Array(l) << v }
     | value

argument_list = argument_list:al - "," - identifier:i { Array(al) << i }
              | identifier
         
array = "[" list:l "]" { l }

function = "(" argument_list:al ")" < "!"? > sp-nl "{" sp-nl expressions:e sp-nl "}" ~function_literal(al, e, text == "!")

object = "{" sp-nl object_list:ol sp-nl "}" { ol }

object_list = object_list:ol - "," sp-nl identifier:i ":" sp-nl expression:e { ol.merge(Hash[i, e]) }
            | sp-nl identifier:i ":" sp-nl expression:e { Hash[i, e] }

call_operation = - < operators > - value:v { [text, v] }
               | array:a { ["[]", method_call(nil, "[]", a)] }
               | < "." > identifier:i { [text, method_call(nil, i, nil)] }
               | "(" list:l ")" { ["()", method_call(nil, "()", Array(l))] }

call_chain = value:v call_operation+:co { co.flatten.unshift(v) }
call = call_chain:cc { rpn(shunting_yard(cc)) }