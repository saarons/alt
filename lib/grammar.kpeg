%% name = Alt::Parser
%% ast-location = ::Alt::AST
%% assign_call = ast AssignCall(identifier, value)
%% method_call = ast MethodCall(receiver, method, arguments)
%% and_operator = ast AndOperator(lhs, rhs)
%% or_operator = ast OrOperator(lhs, rhs)
%% if_statement = ast IfStatement(conditionals, fallback)
%% while_statement = ast WhileStatement(value, block)
%% return_statement = ast ReturnStatement(value)
%% break_statement = ast BreakStatement
%% string_literal = ast StringLiteral(string)
%% number_literal = ast NumberLiteral(number)
%% array_literal = ast ArrayLiteral(array)
%% object_literal = ast ObjectLiteral(object)
%% function_literal = ast FunctionLiteral(arguments, expressions, pure)
%% true_literal = ast TrueLiteral
%% false_literal = ast FalseLiteral
%% nil_literal = ast NilLiteral

%% {
def shunting_yard(input)
  [].tap do |rpn|
    operator_stack = []
    input.each do |object|
      if op1 = Alt::AST::PrecedenceTable.lookup(object)
        rpn << operator_stack.pop while (op2 = operator_stack.last) && (op1.left_associative? ? op1.precedence <= op2.precedence : op1.precedence < op2.precedence)
        operator_stack << op1
      else
        rpn << object
      end
    end
    rpn << operator_stack.pop until operator_stack.empty?
  end
end

def rpn(input)
  results = []
  input.each do |object|
    if object.is_a?(Alt::AST::Operator)
      r, l = results.pop, results.pop
      results << object.apply(l, r)
    else
      results << object
    end
  end
  results.first
end
}

space = " "
char = /\p{Word}/
digit = /\p{Digit}/

newline = "\n"
terminator = newline (space | newline)*

number = < "-"? digit+ ("." digit+)? > { text }
identifier = < char (char | digit)* > { text }
      
quote = /#{QUOTE_REGEXP.source}/
not_quote = < /#{NOT_QUOTE.source}/ > { text }

escaped_char = "\\n"  { "\n" }
             | "\\b"  { "\b" }
             | "\\f"  { "\f" }
             | "\\r"  { "\r" }
             | "\\t"  { "\t" }
             | "\\\\" { "\\" }

escaped_quote = < /#{ESCAPED_QUOTE.source}/ > { text.gsub("\\", "") }

string = quote (escaped_quote | escaped_char | not_quote)*:chars quote { chars.join }

- = space*
sp-nl = (space | newline)*

operators = "||"
          | "&&"
          | "=="
          | "!="
          | "<=>"
          | "<="
          | "<<"
          | "<"
          | ">>"
          | ">="
          | ">"
          | "+"
          | "-"
          | "*"
          | "/"
          | "^"
          | "%"
          
equals_sign = "="
            | "Ôºù"

root = expressions

expressions = expressions:es terminator expression:e { es << e }
            | expressions:es terminator { es }
            | expression:e { [e] }
            | terminator
            
expression = while
           | break
           | return
           | value
           
value = call
      | value2
           
value2 = if
       | literal
       | conditional
       | identifier
           
literal = string:s ~string_literal(s)
        | number:n ~number_literal(n)
        | array:a ~array_literal(a)
        | object:o ~object_literal(o)
        | function
        | /#{Alt::Grammar.keyword("true")}/ ~true_literal
        | /#{Alt::Grammar.keyword("false")}/ ~false_literal
        | /#{Alt::Grammar.keyword("nil")}/ ~nil_literal

list = list:l - "," - value:v { l << v }
     | value:v { [v] }

argument_list = argument_list:al - "," - identifier:i { al << i }
              | identifier:i { [i] }

array = "[" list?:l "]" { l || [] }

function = ("(" argument_list?:al ")")? < "!"? > sp-nl block:b ~function_literal(al, b, text != "!")
return = /#{Alt::Grammar.keyword("return")}/ - value?:v ~return_statement(v)

object = "{" sp-nl object_list?:ol sp-nl "}" { ol || {} }

object_list = object_list:ol sp-nl "," sp-nl string:s ":" sp-nl value:v { ol.merge(Hash[string_literal(s), v]) }
            | sp-nl string:s ":" sp-nl value:v { Hash[string_literal(s), v] }
            
if = /#{Alt::Grammar.keyword("if")}/ sp-nl conditional_block:primary sp-nl elseif*:alternates sp-nl else?:fallback { if_statement(alternates.unshift(primary), fallback) }
elseif = /#{Alt::Grammar.keyword("elseif")}/ sp-nl conditional_block:cb sp-nl { cb }
else = /#{Alt::Grammar.keyword("else")}/ sp-nl block:b { b }

conditional_block = conditional:c sp-nl block:b { [c, b] }

while = /#{Alt::Grammar.keyword("while")}/ sp-nl conditional:c sp-nl block:b ~while_statement(c, b)
break = /#{Alt::Grammar.keyword("break")}/ ~break_statement

call_operation = - < operators > - value2:v { [text, v] }
               | array:a { ["[]", method_call(nil, "[]", a)] }
               | < "." > identifier:i { [text, method_call(nil, i, nil)] }
               | "(" list?:l ")" { ["()", method_call(nil, "()", l)] }

assign_operation = identifier:i - equals_sign - value2:v call_operation*:co { [i, "=", v, co] }

call_operation_chain = value2:v call_operation+:co { [v, co] }

call_chain = (assign_operation | call_operation_chain)+:cc  { cc.flatten }
call = call_chain:cc { rpn(shunting_yard(cc)) }

block = "{" sp-nl expressions:e sp-nl "}" { e }
conditional = "(" sp-nl value:v sp-nl ")" { v }